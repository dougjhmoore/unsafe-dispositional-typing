#!/bin/bash

# create_project_structure.sh
# Generates directory tree for Dispositional Typing IEEE TSE project
# Usage: ./create_project_structure.sh [project_name]

PROJECT_NAME=${1:-"dispositional-typing"}

echo "Creating project structure for: $PROJECT_NAME"

# Create main project directory
mkdir -p "$PROJECT_NAME"
cd "$PROJECT_NAME"

# Create main directories
mkdir -p src/{compiler-passes,analysis,utils}
mkdir -p scripts/{analysis,evaluation,benchmarks}
mkdir -p evaluation/{llvm-results,spec-results,sqlite-results,redis-results,rust-results}
mkdir -p data/{timing,scalability,unsafe-elimination}
mkdir -p docs/{paper,reproduction,api}
mkdir -p tests/{unit,integration,regression}
mkdir -p benchmarks/{llvm-suite,spec-cpu,real-world}
mkdir -p examples/{c-cpp,rust}
mkdir -p tools/{clang-plugin,rust-integration}

# Create scalability analysis specific structure
mkdir -p data/scalability/{raw-data,figures,reports}
mkdir -p scripts/analysis/scalability

# Create paper-related directories
mkdir -p docs/paper/{latex,figures,supplemental}
mkdir -p docs/reproduction/{setup,validation,troubleshooting}

# Create configuration directories
mkdir -p config/{compiler,analysis,evaluation}

# Create output directories
mkdir -p output/{logs,reports,artifacts}

# Create core script files
cat > scripts/analysis/scalability/scalability_analysis.py << 'EOF'
# Scalability analysis script will go here
# Copy your existing scalability_analysis.py content
pass
EOF

cat > scripts/requirements.txt << 'EOF'
# Core dependencies for scalability analysis reproduction
numpy>=1.21.0
matplotlib>=3.5.0
scipy>=1.7.0
EOF

# Create main documentation files
cat > README.md << 'EOF'
# Dispositional Typing: Eliminating Unsafe Annotations

Implementation and evaluation materials for the IEEE TSE 2025 paper:
"Dispositional Typing: Eliminating Unsafe Annotations in C, C++, and Rust"

## Repository Structure

See `docs/reproduction/` for complete setup and reproduction instructions.

## Quick Start

```bash
# Setup environment
cd scripts/
pip install -r requirements.txt

# Run scalability analysis
cd analysis/scalability/
python scalability_analysis.py --output-dir ../../../data/scalability/
```

## Citation

```bibtex
@article{moore2025dispositional,
  title={Dispositional Typing: Eliminating Unsafe Annotations in C, C++, and Rust},
  author={Moore, Douglas J. Huntington},
  journal={IEEE Transactions on Software Engineering},
  year={2025},
  doi={10.5281/zenodo.15632321}
}
```
EOF

# Create detailed reproduction guide
cat > docs/reproduction/setup_guide.md << 'EOF'
# Dispositional Typing - Reproduction Setup Guide

## Environment Requirements

- Python 3.7+
- LLVM 17.0.1+ (for C++ analysis)
- Rust nightly-1.77+ (for Rust analysis)
- Ubuntu 22.04 LTS (recommended)

## Installation Steps

### 1. Clone Repository
```bash
git clone https://github.com/yourusername/dispositional-typing.git
cd dispositional-typing
```

### 2. Setup Python Environment
```bash
python -m venv venv
source venv/bin/activate
pip install -r scripts/requirements.txt
```

### 3. Build Core Components
```bash
# Instructions for building compiler passes
cd src/compiler-passes/
# Build instructions will go here
```

## Reproduction Checklist

- [ ] Environment setup complete
- [ ] Dependencies installed
- [ ] Core components built
- [ ] Scalability analysis verified
- [ ] LLVM test suite results reproduced
- [ ] Rust integration tested

## Expected Results

- Scalability: Linear O(n) with ~0.8μs/edge coefficient
- Unsafe reduction: ~78% across all evaluated systems
- False positives: Zero across entire corpus
EOF

# Create evaluation documentation
cat > docs/reproduction/evaluation_guide.md << 'EOF'
# Evaluation Reproduction Guide

## Scalability Analysis

Location: `scripts/analysis/scalability/`

```bash
cd scripts/analysis/scalability/
python scalability_analysis.py --output-dir ../../../data/scalability/
```

Expected outputs:
- `scalability_figure.png` - Publication figure
- `timing_data.csv` - Raw measurements
- `analysis_report.txt` - Statistical validation

## LLVM Test Suite Evaluation

Location: `evaluation/llvm-results/`

Instructions for reproducing the 78% unsafe elimination results.

## Rust Standard Library Analysis

Location: `evaluation/rust-results/`

Instructions for reproducing Rust libstd unsafe reduction analysis.
EOF

# Create paper documentation
cat > docs/paper/figure_reproduction.md << 'EOF'
# IEEE TSE Paper Figure Reproduction

## Figure 1: Scalability Analysis

Generated by: `scripts/analysis/scalability/scalability_analysis.py`
Location: `data/scalability/scalability_figure.png`

### LaTeX Integration
```latex
\begin{figure}[t]
\centering
\includegraphics[width=0.75\textwidth]{scalability_figure.png}
\caption{Scalability analysis showing linear relationship...}
\label{fig:scalability}
\end{figure}
```

## Table Reproduction

All evaluation tables can be reproduced using scripts in `scripts/evaluation/`.
EOF

# Create configuration files
cat > config/analysis/default.yaml << 'EOF'
# Default analysis configuration
analysis:
  timeout: 30  # seconds
  max_ssa_edges: 1000
  enable_cycles: true
  
output:
  format: ["json", "csv"]
  detailed_logs: true
EOF

# Create example files
cat > examples/c-cpp/unsafe_example.cpp << 'EOF'
// Example C++ code with unsafe casts
// This file demonstrates patterns that dispositional typing can verify

#include <cstdint>

int main() {
    uintptr_t addr = 0x1000;
    int *p = (int*)addr;  /* unsafe - can this be eliminated? */
    return 0;
}
EOF

cat > examples/rust/unsafe_example.rs << 'EOF'
// Example Rust code with unsafe blocks
// This file demonstrates patterns that dispositional typing can verify

fn main() {
    let addr: usize = 0x1000;
    unsafe {
        let p = addr as *const i32;  // Can dispositional typing prove this safe?
        // Additional unsafe operations
    }
}
EOF

# Create build configuration
cat > Makefile << 'EOF'
# Dispositional Typing Project Makefile

.PHONY: all clean test setup analysis

all: setup analysis

setup:
	python -m venv venv
	. venv/bin/activate && pip install -r scripts/requirements.txt

analysis:
	cd scripts/analysis/scalability && python scalability_analysis.py --output-dir ../../../data/scalability/

test:
	cd tests && python -m pytest

clean:
	rm -rf output/* data/scalability/* venv/

help:
	@echo "Available targets:"
	@echo "  setup     - Setup Python environment and dependencies"
	@echo "  analysis  - Run scalability analysis"
	@echo "  test      - Run test suite"
	@echo "  clean     - Clean generated files"
EOF

# Create .gitignore
cat > .gitignore << 'EOF'
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/

# IDEs
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Project specific
output/
*.log
/data/scalability/scalability_figure.png
/data/scalability/timing_data.csv
/data/scalability/analysis_report.txt

# Temporary files
*.tmp
*.temp
EOF

# Create placeholder files for key scripts
touch scripts/evaluation/llvm_test_suite.py
touch scripts/evaluation/rust_analysis.py
touch scripts/evaluation/spec_benchmarks.py
touch scripts/benchmarks/timing_harness.py

# Create empty data files (will be populated by scripts)
touch data/timing/llvm_measurements.csv
touch data/timing/rust_measurements.csv
touch data/unsafe-elimination/summary_results.json

# Create test files
touch tests/test_scalability_analysis.py
touch tests/test_dispositional_algebra.py

echo ""
echo "✅ Project structure created successfully!"
echo ""
echo "📁 Directory tree for: $PROJECT_NAME"
tree -I '__pycache__|*.pyc|venv' "$PROJECT_NAME" 2>/dev/null || find "$PROJECT_NAME" -type d | sed 's/[^/]*\//│  /g;s/│  \([^│]\)/└── \1/'

echo ""
echo "📋 Next steps:"
echo "1. cd $PROJECT_NAME"
echo "2. Copy your scalability_analysis.py to scripts/analysis/scalability/"
echo "3. Run: make setup"
echo "4. Run: make analysis"
echo ""
echo "🔗 Ready for GitHub repository creation and Zenodo integration!"